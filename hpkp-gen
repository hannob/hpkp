#!/bin/sh

# ------------------------------------------------------------------------------
# hpkp-gen - HTTP Public Key Pinning header pin generator.
#
# Written in 2014 by Hanno Böck <https://hboeck.de/>
#
# To the extent possible under law, the author(s) have dedicated all copyright
# and related and neighboring rights to this software to the public domain
# worldwide. This software is distributed without any warranty. 
#
# You should have received a copy of the CC0 Public Domain Dedication along with
# this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# HTTP Public Key Pinning header pin generator.
#
# AUTHOR:     Hanno Böck <https://hboeck.de/>
# AUTHOR:     Richard Fussenegger <richard@fussenegger.info>
# COPYRIGHT:  Copyright (c) 2014 Hanno Böck
# LICENSE:    http://creativecommons.org/publicdomain/zero/1.0/
# LINK:       https://tools.ietf.org/html/draft-ietf-websec-key-pinning-20
# ------------------------------------------------------------------------------


# ------------------------------------------------------------------------------
#                                                                      Variables
# ------------------------------------------------------------------------------


# The maximum age for the pinned key in seconds.
#
# DEFAULT: 5184000 seconds (60 days)
MAX_AGE=5184000

# Whether to include the 'includeSubdomains' directive or not.
SUBDOMAINS=false

# Output NGINX configuration line?
NGINX=false

# Don't be nice?
QUIET=false

# ------------------------------------------------------------------------------
#                                                                      Functions
# ------------------------------------------------------------------------------


# Print usage information.
#
# RETURN:
#  0 - Printing successful.
#  1 - Printing failed.
usage()
{
  cat << EOT
Usage: ${0##*/} [OPTION]... [FILES]...
HKP header generator according to Public Key Pinning Extension for HTTP.

[FILES] should contain at least two files and can be of type:
  .crt/cert	certificate
  .csr		certificate request
  .key		private key.

The following options are available:

  -m    Specify the maximum age for the pinned key in seconds (default is
        5184000 or 60 days which is the recommended value).
  -h|?  Print this text and exit.
  -n    Output in the format of a Nginx add_header configuration option
  -q    Quiet (don't print nice text surrounding output)

Usage example: \`sh hpkp-gen -m5184000 -- localhost.crt localhost.key\`

Report bugs at https://github.com/hannob/hpkp/issues
EOT
}


# ------------------------------------------------------------------------------
#                                                                        Program
# ------------------------------------------------------------------------------


# Check exit / return code of every command / function and bail if non-zero.
set -e

# Parse options.
while getopts 'hm:nqr:s' OPTION
do
  case "${OPTION}" in
    h|[?]) usage && exit 0 ;;
    m) MAX_AGE="${OPTARG}" ;;
    n) NGINX=true ;;
    r) REPORT_URI="${OPTARG}" ;;
    s) SUBDOMAINS=true ;;
    q) QUIET=true ;;
  esac

  # Remove parsed option from input.
  shift $(( $OPTIND - 1 ))
done

# Remove possibly passed end of options marker.
if [ "${1}" = "--" ]
then
  shift $(( $OPTIND - 1 ))
fi

# Ensure we got at least two files.
if [ $# -lt 2 ]
then
  usage >&2
  exit 1
fi

# Ensure all non POSIX commands are available.
for CMD in base64 openssl
do
  if ! type "${CMD}" >/dev/null 2>&1
  then
    printf -- '%s must be installed on this system.\n' "${CMD}" >&2
    exit 1
  fi
done

# Header field identifier that prefixes the directives.
HEAD="Public-Key-Pins:"

# Used to count the files again, we need at least two files of a known extension.
C=0

# We need a temporary file because OpenSSL wasn't made for pipes.
TMPFILE=$(mktemp -t hpkp.XXX)

# Go through all files that were passed to the program.
for FILE in "${@}"
do
  # Get absolute path to the file (more robust). Note that readlink and realpath
  # might not be installed, we use POSIX commands only.
  #
  # SEE: http://stackoverflow.com/a/21188136/1251219
  FILE="$(cd -- "$(dirname -- "${FILE}")" && pwd)/$(basename "${FILE}")"

  # We might be dealing with a file that has no extension but is still valid,
  # e.g. if one simply calls the file `crt`, `csr`, and `key`. We can easily
  # allow that as well by substitution of the largest prefix before a slash.
  EXTENSION="${FILE##*/}"

  # Extract the files extension via substitution of the largest prefix before a
  # a dot (e.g. `my.file.name.with.extension` results in `extension`).
  EXTENSION="${FILE##*.}"

  # Go through all known extensions and create the public key.
  case "${EXTENSION}" in
    crt|cert) openssl x509 -pubkey -noout -in "${FILE}" | openssl asn1parse -inform pem -noout -out "${TMPFILE}" ;;

    csr) openssl req -pubkey -noout -in "${FILE}" | openssl asn1parse -inform pem -noout -out "${TMPFILE}" ;;

    key) openssl pkey -in "${FILE}" -pubout | openssl asn1parse -inform pem -noout -out "${TMPFILE}" ;;
    *) printf 'Unknown file type %s.\n' "${EXTENSION}" >&2 && exit 1 ;;
  esac

  # Create the hash from the public key.
  PHASH=$(openssl dgst -sha256 -binary "${TMPFILE}" | base64)

  # Append it to the header line.
  HEAD="${HEAD} pin-sha256=\"${PHASH}\";"

  # Increase the counter.
  C=$(( $C + 1 ))
done

# Delete the temporary file.
rm "${TMPFILE}"

# Check again to ensure that we got at least two files with a known extension.
if [ $C -lt 2 ]
then
  printf -- 'Warning: HKP requires at least two keys.\n' >&2
  exit 1
fi

# Note that it actually doesn't matter where each directive is within the header
# line, but we stick to the examples from the RFC.
HEAD="${HEAD} max-age=${MAX_AGE};"
[ ${SUBDOMAINS} = true ] && HEAD="${HEAD} includeSubDomains;"
[ -n "${REPORT_URI}" ] && HEAD="${HEAD} report-uri=\"${REPORT_URI}\";"

# Remove the last semicolon from the output.
HEAD=$(printf '%s' "${HEAD}" | head -c-1)

if [ ${NGINX} = true ];
then
	HEAD=$(echo "add_header Public-Key-Pins \"$(echo ${HEAD} | sed 's/"/\\"/g')\";")
fi

if [ ${QUIET} = false ];
then
	# That's it, the requested header line.
	cat << EOT
Your HTTP Public Key Pinning (HPKP) header:

${HEAD}

Please refer to the documentation of your web server software to find out how to
set the HTTP header.
EOT
else
	echo ${HEAD}
fi
exit 0
